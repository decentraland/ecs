// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

export class SphereShape {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): SphereShape {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsSphereShape(
    bb: flatbuffers.ByteBuffer,
    obj?: SphereShape
  ): SphereShape {
    return (obj || new SphereShape()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  static getSizePrefixedRootAsSphereShape(
    bb: flatbuffers.ByteBuffer,
    obj?: SphereShape
  ): SphereShape {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new SphereShape()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  withCollisions(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false
  }

  isPointerBlocker(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false
  }

  visible(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false
  }

  static startSphereShape(builder: flatbuffers.Builder) {
    builder.startObject(3)
  }

  static addWithCollisions(
    builder: flatbuffers.Builder,
    withCollisions: boolean
  ) {
    builder.addFieldInt8(0, +withCollisions, +false)
  }

  static addIsPointerBlocker(
    builder: flatbuffers.Builder,
    isPointerBlocker: boolean
  ) {
    builder.addFieldInt8(1, +isPointerBlocker, +false)
  }

  static addVisible(builder: flatbuffers.Builder, visible: boolean) {
    builder.addFieldInt8(2, +visible, +false)
  }

  static endSphereShape(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static finishSphereShapeBuffer(
    builder: flatbuffers.Builder,
    offset: flatbuffers.Offset
  ) {
    builder.finish(offset)
  }

  static finishSizePrefixedSphereShapeBuffer(
    builder: flatbuffers.Builder,
    offset: flatbuffers.Offset
  ) {
    builder.finish(offset, undefined, true)
  }

  static createSphereShape(
    builder: flatbuffers.Builder,
    withCollisions: boolean,
    isPointerBlocker: boolean,
    visible: boolean
  ): flatbuffers.Offset {
    SphereShape.startSphereShape(builder)
    SphereShape.addWithCollisions(builder, withCollisions)
    SphereShape.addIsPointerBlocker(builder, isPointerBlocker)
    SphereShape.addVisible(builder, visible)
    return SphereShape.endSphereShape(builder)
  }

  unpack(): SphereShapeT {
    return new SphereShapeT(
      this.withCollisions(),
      this.isPointerBlocker(),
      this.visible()
    )
  }

  unpackTo(_o: SphereShapeT): void {
    _o.withCollisions = this.withCollisions()
    _o.isPointerBlocker = this.isPointerBlocker()
    _o.visible = this.visible()
  }
}

export class SphereShapeT {
  constructor(
    public withCollisions: boolean = false,
    public isPointerBlocker: boolean = false,
    public visible: boolean = false
  ) {}

  static pack(
    builder: flatbuffers.Builder,
    value: SphereShapeT
  ): flatbuffers.Offset {
    return SphereShape.createSphereShape(
      builder,
      value.withCollisions,
      value.isPointerBlocker,
      value.visible
    )
  }
}
