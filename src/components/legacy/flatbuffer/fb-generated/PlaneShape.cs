// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PlaneShape : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PlaneShape GetRootAsPlaneShape(ByteBuffer _bb) { return GetRootAsPlaneShape(_bb, new PlaneShape()); }
  public static PlaneShape GetRootAsPlaneShape(ByteBuffer _bb, PlaneShape obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlaneShape __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool WithCollisions { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsPointerBlocker { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Visible { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float Uvs(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int UvsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetUvsBytes() { return __p.__vector_as_span<float>(10, 4); }
#else
  public ArraySegment<byte>? GetUvsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public float[] GetUvsArray() { return __p.__vector_as_array<float>(10); }
  public float Width { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Height { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<PlaneShape> CreatePlaneShape(FlatBufferBuilder builder,
      bool with_collisions = false,
      bool is_pointer_blocker = false,
      bool visible = false,
      VectorOffset uvsOffset = default(VectorOffset),
      float width = 0.0f,
      float height = 0.0f) {
    builder.StartTable(6);
    PlaneShape.AddHeight(builder, height);
    PlaneShape.AddWidth(builder, width);
    PlaneShape.AddUvs(builder, uvsOffset);
    PlaneShape.AddVisible(builder, visible);
    PlaneShape.AddIsPointerBlocker(builder, is_pointer_blocker);
    PlaneShape.AddWithCollisions(builder, with_collisions);
    return PlaneShape.EndPlaneShape(builder);
  }

  public static void StartPlaneShape(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddWithCollisions(FlatBufferBuilder builder, bool withCollisions) { builder.AddBool(0, withCollisions, false); }
  public static void AddIsPointerBlocker(FlatBufferBuilder builder, bool isPointerBlocker) { builder.AddBool(1, isPointerBlocker, false); }
  public static void AddVisible(FlatBufferBuilder builder, bool visible) { builder.AddBool(2, visible, false); }
  public static void AddUvs(FlatBufferBuilder builder, VectorOffset uvsOffset) { builder.AddOffset(3, uvsOffset.Value, 0); }
  public static VectorOffset CreateUvsVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUvsVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUvsVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUvsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUvsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWidth(FlatBufferBuilder builder, float width) { builder.AddFloat(4, width, 0.0f); }
  public static void AddHeight(FlatBufferBuilder builder, float height) { builder.AddFloat(5, height, 0.0f); }
  public static Offset<PlaneShape> EndPlaneShape(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PlaneShape>(o);
  }
  public static void FinishPlaneShapeBuffer(FlatBufferBuilder builder, Offset<PlaneShape> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPlaneShapeBuffer(FlatBufferBuilder builder, Offset<PlaneShape> offset) { builder.FinishSizePrefixed(offset.Value); }
  public PlaneShapeT UnPack() {
    var _o = new PlaneShapeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlaneShapeT _o) {
    _o.WithCollisions = this.WithCollisions;
    _o.IsPointerBlocker = this.IsPointerBlocker;
    _o.Visible = this.Visible;
    _o.Uvs = new List<float>();
    for (var _j = 0; _j < this.UvsLength; ++_j) {_o.Uvs.Add(this.Uvs(_j));}
    _o.Width = this.Width;
    _o.Height = this.Height;
  }
  public static Offset<PlaneShape> Pack(FlatBufferBuilder builder, PlaneShapeT _o) {
    if (_o == null) return default(Offset<PlaneShape>);
    var _uvs = default(VectorOffset);
    if (_o.Uvs != null) {
      var __uvs = _o.Uvs.ToArray();
      _uvs = CreateUvsVector(builder, __uvs);
    }
    return CreatePlaneShape(
      builder,
      _o.WithCollisions,
      _o.IsPointerBlocker,
      _o.Visible,
      _uvs,
      _o.Width,
      _o.Height);
  }
}

public class PlaneShapeT
{
  public bool WithCollisions { get; set; }
  public bool IsPointerBlocker { get; set; }
  public bool Visible { get; set; }
  public List<float> Uvs { get; set; }
  public float Width { get; set; }
  public float Height { get; set; }

  public PlaneShapeT() {
    this.WithCollisions = false;
    this.IsPointerBlocker = false;
    this.Visible = false;
    this.Uvs = null;
    this.Width = 0.0f;
    this.Height = 0.0f;
  }
  public static PlaneShapeT DeserializeFromBinary(byte[] fbBuffer) {
    return PlaneShape.GetRootAsPlaneShape(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PlaneShape.FinishPlaneShapeBuffer(fbb, PlaneShape.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

