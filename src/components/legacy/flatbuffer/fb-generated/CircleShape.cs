// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CircleShape : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CircleShape GetRootAsCircleShape(ByteBuffer _bb) { return GetRootAsCircleShape(_bb, new CircleShape()); }
  public static CircleShape GetRootAsCircleShape(ByteBuffer _bb, CircleShape obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CircleShape __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool WithCollisions { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsPointerBlocker { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Visible { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float Segments { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Arc { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<CircleShape> CreateCircleShape(FlatBufferBuilder builder,
      bool with_collisions = false,
      bool is_pointer_blocker = false,
      bool visible = false,
      float segments = 0.0f,
      float arc = 0.0f) {
    builder.StartTable(5);
    CircleShape.AddArc(builder, arc);
    CircleShape.AddSegments(builder, segments);
    CircleShape.AddVisible(builder, visible);
    CircleShape.AddIsPointerBlocker(builder, is_pointer_blocker);
    CircleShape.AddWithCollisions(builder, with_collisions);
    return CircleShape.EndCircleShape(builder);
  }

  public static void StartCircleShape(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddWithCollisions(FlatBufferBuilder builder, bool withCollisions) { builder.AddBool(0, withCollisions, false); }
  public static void AddIsPointerBlocker(FlatBufferBuilder builder, bool isPointerBlocker) { builder.AddBool(1, isPointerBlocker, false); }
  public static void AddVisible(FlatBufferBuilder builder, bool visible) { builder.AddBool(2, visible, false); }
  public static void AddSegments(FlatBufferBuilder builder, float segments) { builder.AddFloat(3, segments, 0.0f); }
  public static void AddArc(FlatBufferBuilder builder, float arc) { builder.AddFloat(4, arc, 0.0f); }
  public static Offset<CircleShape> EndCircleShape(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CircleShape>(o);
  }
  public static void FinishCircleShapeBuffer(FlatBufferBuilder builder, Offset<CircleShape> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCircleShapeBuffer(FlatBufferBuilder builder, Offset<CircleShape> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CircleShapeT UnPack() {
    var _o = new CircleShapeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CircleShapeT _o) {
    _o.WithCollisions = this.WithCollisions;
    _o.IsPointerBlocker = this.IsPointerBlocker;
    _o.Visible = this.Visible;
    _o.Segments = this.Segments;
    _o.Arc = this.Arc;
  }
  public static Offset<CircleShape> Pack(FlatBufferBuilder builder, CircleShapeT _o) {
    if (_o == null) return default(Offset<CircleShape>);
    return CreateCircleShape(
      builder,
      _o.WithCollisions,
      _o.IsPointerBlocker,
      _o.Visible,
      _o.Segments,
      _o.Arc);
  }
};

public class CircleShapeT
{
  public bool WithCollisions { get; set; }
  public bool IsPointerBlocker { get; set; }
  public bool Visible { get; set; }
  public float Segments { get; set; }
  public float Arc { get; set; }

  public CircleShapeT() {
    this.WithCollisions = false;
    this.IsPointerBlocker = false;
    this.Visible = false;
    this.Segments = 0.0f;
    this.Arc = 0.0f;
  }
  public static CircleShapeT DeserializeFromBinary(byte[] fbBuffer) {
    return CircleShape.GetRootAsCircleShape(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CircleShape.FinishCircleShapeBuffer(fbb, CircleShape.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

