// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FBColor, unionToFBColor, unionListToFBColor } from './f-b-color';
import { FBColor3, FBColor3T } from './f-b-color3';
import { FBColor4, FBColor4T } from './f-b-color4';
import { FBTexture, FBTextureT } from './f-b-texture';
import { FBTransparencyMode } from './f-b-transparency-mode';


export class FBMaterial {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FBMaterial {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBMaterial(bb:flatbuffers.ByteBuffer, obj?:FBMaterial):FBMaterial {
  return (obj || new FBMaterial()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBMaterial(bb:flatbuffers.ByteBuffer, obj?:FBMaterial):FBMaterial {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBMaterial()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

alphaTest():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

albedoColorType():FBColor {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FBColor.NONE;
}

albedoColor<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

emissiveColor(obj?:FBColor3):FBColor3|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new FBColor3()).__init(this.bb_pos + offset, this.bb!) : null;
}

metallic():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

roughness():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

reflectivityColor(obj?:FBColor3):FBColor3|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new FBColor3()).__init(this.bb_pos + offset, this.bb!) : null;
}

directIntensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

microSurface():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

emissiveIntensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

specularIntensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

albedoTexture(obj?:FBTexture):FBTexture|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new FBTexture()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

alphaTexture(obj?:FBTexture):FBTexture|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new FBTexture()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

emissiveTexture(obj?:FBTexture):FBTexture|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new FBTexture()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

bumpTexture(obj?:FBTexture):FBTexture|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new FBTexture()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

castShadows():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

transparencyMode():FBTransparencyMode {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : FBTransparencyMode.OPAQUE;
}

static startFBMaterial(builder:flatbuffers.Builder) {
  builder.startObject(17);
}

static addAlphaTest(builder:flatbuffers.Builder, alphaTest:number) {
  builder.addFieldFloat32(0, alphaTest, 0.0);
}

static addAlbedoColorType(builder:flatbuffers.Builder, albedoColorType:FBColor) {
  builder.addFieldInt8(1, albedoColorType, FBColor.NONE);
}

static addAlbedoColor(builder:flatbuffers.Builder, albedoColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, albedoColorOffset, 0);
}

static addEmissiveColor(builder:flatbuffers.Builder, emissiveColorOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, emissiveColorOffset, 0);
}

static addMetallic(builder:flatbuffers.Builder, metallic:number) {
  builder.addFieldFloat32(4, metallic, 0.0);
}

static addRoughness(builder:flatbuffers.Builder, roughness:number) {
  builder.addFieldFloat32(5, roughness, 0.0);
}

static addReflectivityColor(builder:flatbuffers.Builder, reflectivityColorOffset:flatbuffers.Offset) {
  builder.addFieldStruct(6, reflectivityColorOffset, 0);
}

static addDirectIntensity(builder:flatbuffers.Builder, directIntensity:number) {
  builder.addFieldFloat32(7, directIntensity, 0.0);
}

static addMicroSurface(builder:flatbuffers.Builder, microSurface:number) {
  builder.addFieldFloat32(8, microSurface, 0.0);
}

static addEmissiveIntensity(builder:flatbuffers.Builder, emissiveIntensity:number) {
  builder.addFieldFloat32(9, emissiveIntensity, 0.0);
}

static addSpecularIntensity(builder:flatbuffers.Builder, specularIntensity:number) {
  builder.addFieldFloat32(10, specularIntensity, 0.0);
}

static addAlbedoTexture(builder:flatbuffers.Builder, albedoTextureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, albedoTextureOffset, 0);
}

static addAlphaTexture(builder:flatbuffers.Builder, alphaTextureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, alphaTextureOffset, 0);
}

static addEmissiveTexture(builder:flatbuffers.Builder, emissiveTextureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, emissiveTextureOffset, 0);
}

static addBumpTexture(builder:flatbuffers.Builder, bumpTextureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, bumpTextureOffset, 0);
}

static addCastShadows(builder:flatbuffers.Builder, castShadows:boolean) {
  builder.addFieldInt8(15, +castShadows, +false);
}

static addTransparencyMode(builder:flatbuffers.Builder, transparencyMode:FBTransparencyMode) {
  builder.addFieldInt32(16, transparencyMode, FBTransparencyMode.OPAQUE);
}

static endFBMaterial(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFBMaterialBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedFBMaterialBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): FBMaterialT {
  return new FBMaterialT(
    this.alphaTest(),
    this.albedoColorType(),
    (() => {
      let temp = unionToFBColor(this.albedoColorType(), this.albedoColor.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })(),
    (this.emissiveColor() !== null ? this.emissiveColor()!.unpack() : null),
    this.metallic(),
    this.roughness(),
    (this.reflectivityColor() !== null ? this.reflectivityColor()!.unpack() : null),
    this.directIntensity(),
    this.microSurface(),
    this.emissiveIntensity(),
    this.specularIntensity(),
    (this.albedoTexture() !== null ? this.albedoTexture()!.unpack() : null),
    (this.alphaTexture() !== null ? this.alphaTexture()!.unpack() : null),
    (this.emissiveTexture() !== null ? this.emissiveTexture()!.unpack() : null),
    (this.bumpTexture() !== null ? this.bumpTexture()!.unpack() : null),
    this.castShadows(),
    this.transparencyMode()
  );
}


unpackTo(_o: FBMaterialT): void {
  _o.alphaTest = this.alphaTest();
  _o.albedoColorType = this.albedoColorType();
  _o.albedoColor = (() => {
      let temp = unionToFBColor(this.albedoColorType(), this.albedoColor.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
  _o.emissiveColor = (this.emissiveColor() !== null ? this.emissiveColor()!.unpack() : null);
  _o.metallic = this.metallic();
  _o.roughness = this.roughness();
  _o.reflectivityColor = (this.reflectivityColor() !== null ? this.reflectivityColor()!.unpack() : null);
  _o.directIntensity = this.directIntensity();
  _o.microSurface = this.microSurface();
  _o.emissiveIntensity = this.emissiveIntensity();
  _o.specularIntensity = this.specularIntensity();
  _o.albedoTexture = (this.albedoTexture() !== null ? this.albedoTexture()!.unpack() : null);
  _o.alphaTexture = (this.alphaTexture() !== null ? this.alphaTexture()!.unpack() : null);
  _o.emissiveTexture = (this.emissiveTexture() !== null ? this.emissiveTexture()!.unpack() : null);
  _o.bumpTexture = (this.bumpTexture() !== null ? this.bumpTexture()!.unpack() : null);
  _o.castShadows = this.castShadows();
  _o.transparencyMode = this.transparencyMode();
}
}

export class FBMaterialT {
constructor(
  public alphaTest: number = 0.0,
  public albedoColorType: FBColor = FBColor.NONE,
  public albedoColor: FBColor3T|FBColor4T|null = null,
  public emissiveColor: FBColor3T|null = null,
  public metallic: number = 0.0,
  public roughness: number = 0.0,
  public reflectivityColor: FBColor3T|null = null,
  public directIntensity: number = 0.0,
  public microSurface: number = 0.0,
  public emissiveIntensity: number = 0.0,
  public specularIntensity: number = 0.0,
  public albedoTexture: FBTextureT|null = null,
  public alphaTexture: FBTextureT|null = null,
  public emissiveTexture: FBTextureT|null = null,
  public bumpTexture: FBTextureT|null = null,
  public castShadows: boolean = false,
  public transparencyMode: FBTransparencyMode = FBTransparencyMode.OPAQUE
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const albedoColor = builder.createObjectOffset(this.albedoColor);
  const albedoTexture = (this.albedoTexture !== null ? this.albedoTexture!.pack(builder) : 0);
  const alphaTexture = (this.alphaTexture !== null ? this.alphaTexture!.pack(builder) : 0);
  const emissiveTexture = (this.emissiveTexture !== null ? this.emissiveTexture!.pack(builder) : 0);
  const bumpTexture = (this.bumpTexture !== null ? this.bumpTexture!.pack(builder) : 0);

  FBMaterial.startFBMaterial(builder);
  FBMaterial.addAlphaTest(builder, this.alphaTest);
  FBMaterial.addAlbedoColorType(builder, this.albedoColorType);
  FBMaterial.addAlbedoColor(builder, albedoColor);
  FBMaterial.addEmissiveColor(builder, (this.emissiveColor !== null ? this.emissiveColor!.pack(builder) : 0));
  FBMaterial.addMetallic(builder, this.metallic);
  FBMaterial.addRoughness(builder, this.roughness);
  FBMaterial.addReflectivityColor(builder, (this.reflectivityColor !== null ? this.reflectivityColor!.pack(builder) : 0));
  FBMaterial.addDirectIntensity(builder, this.directIntensity);
  FBMaterial.addMicroSurface(builder, this.microSurface);
  FBMaterial.addEmissiveIntensity(builder, this.emissiveIntensity);
  FBMaterial.addSpecularIntensity(builder, this.specularIntensity);
  FBMaterial.addAlbedoTexture(builder, albedoTexture);
  FBMaterial.addAlphaTexture(builder, alphaTexture);
  FBMaterial.addEmissiveTexture(builder, emissiveTexture);
  FBMaterial.addBumpTexture(builder, bumpTexture);
  FBMaterial.addCastShadows(builder, this.castShadows);
  FBMaterial.addTransparencyMode(builder, this.transparencyMode);

  return FBMaterial.endFBMaterial(builder);
}
}
