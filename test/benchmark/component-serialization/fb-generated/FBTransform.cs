// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FBTransform : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static FBTransform GetRootAsFBTransform(ByteBuffer _bb) { return GetRootAsFBTransform(_bb, new FBTransform()); }
  public static FBTransform GetRootAsFBTransform(ByteBuffer _bb, FBTransform obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBTransform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vector3? Position { get { int o = __p.__offset(4); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Quaternion? Rotation { get { int o = __p.__offset(6); return o != 0 ? (Quaternion?)(new Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vector3? Scale { get { int o = __p.__offset(8); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartFBTransform(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Vector3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<Quaternion> rotationOffset) { builder.AddStruct(1, rotationOffset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, Offset<Vector3> scaleOffset) { builder.AddStruct(2, scaleOffset.Value, 0); }
  public static Offset<FBTransform> EndFBTransform(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FBTransform>(o);
  }
  public static void FinishFBTransformBuffer(FlatBufferBuilder builder, Offset<FBTransform> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFBTransformBuffer(FlatBufferBuilder builder, Offset<FBTransform> offset) { builder.FinishSizePrefixed(offset.Value); }
  public FBTransformT UnPack() {
    var _o = new FBTransformT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FBTransformT _o) {
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Rotation = this.Rotation.HasValue ? this.Rotation.Value.UnPack() : null;
    _o.Scale = this.Scale.HasValue ? this.Scale.Value.UnPack() : null;
  }
  public static Offset<FBTransform> Pack(FlatBufferBuilder builder, FBTransformT _o) {
    if (_o == null) return default(Offset<FBTransform>);
    StartFBTransform(builder);
    AddPosition(builder, Vector3.Pack(builder, _o.Position));
    AddRotation(builder, Quaternion.Pack(builder, _o.Rotation));
    AddScale(builder, Vector3.Pack(builder, _o.Scale));
    return EndFBTransform(builder);
  }
};

public class FBTransformT
{
  public Vector3T Position { get; set; }
  public QuaternionT Rotation { get; set; }
  public Vector3T Scale { get; set; }

  public FBTransformT() {
    this.Position = new Vector3T();
    this.Rotation = new QuaternionT();
    this.Scale = new Vector3T();
  }
  public static FBTransformT DeserializeFromBinary(byte[] fbBuffer) {
    return FBTransform.GetRootAsFBTransform(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    FBTransform.FinishFBTransformBuffer(fbb, FBTransform.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

