// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class FBTexture {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FBTexture {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBTexture(bb:flatbuffers.ByteBuffer, obj?:FBTexture):FBTexture {
  return (obj || new FBTexture()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBTexture(bb:flatbuffers.ByteBuffer, obj?:FBTexture):FBTexture {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBTexture()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

src():string|null
src(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
src(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

samplingMode():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

wrap():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hasAlpha():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startFBTexture(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addSrc(builder:flatbuffers.Builder, srcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, srcOffset, 0);
}

static addSamplingMode(builder:flatbuffers.Builder, samplingMode:number) {
  builder.addFieldInt32(1, samplingMode, 0);
}

static addWrap(builder:flatbuffers.Builder, wrap:number) {
  builder.addFieldInt32(2, wrap, 0);
}

static addHasAlpha(builder:flatbuffers.Builder, hasAlpha:boolean) {
  builder.addFieldInt8(3, +hasAlpha, +false);
}

static endFBTexture(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFBTexture(builder:flatbuffers.Builder, srcOffset:flatbuffers.Offset, samplingMode:number, wrap:number, hasAlpha:boolean):flatbuffers.Offset {
  FBTexture.startFBTexture(builder);
  FBTexture.addSrc(builder, srcOffset);
  FBTexture.addSamplingMode(builder, samplingMode);
  FBTexture.addWrap(builder, wrap);
  FBTexture.addHasAlpha(builder, hasAlpha);
  return FBTexture.endFBTexture(builder);
}

unpack(): FBTextureT {
  return new FBTextureT(
    this.src(),
    this.samplingMode(),
    this.wrap(),
    this.hasAlpha()
  );
}


unpackTo(_o: FBTextureT): void {
  _o.src = this.src();
  _o.samplingMode = this.samplingMode();
  _o.wrap = this.wrap();
  _o.hasAlpha = this.hasAlpha();
}
}

export class FBTextureT {
constructor(
  public src: string|Uint8Array|null = null,
  public samplingMode: number = 0,
  public wrap: number = 0,
  public hasAlpha: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const src = (this.src !== null ? builder.createString(this.src!) : 0);

  return FBTexture.createFBTexture(builder,
    src,
    this.samplingMode,
    this.wrap,
    this.hasAlpha
  );
}
}
