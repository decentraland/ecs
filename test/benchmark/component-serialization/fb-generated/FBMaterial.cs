// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FBMaterial : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static FBMaterial GetRootAsFBMaterial(ByteBuffer _bb) { return GetRootAsFBMaterial(_bb, new FBMaterial()); }
  public static FBMaterial GetRootAsFBMaterial(ByteBuffer _bb, FBMaterial obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBMaterial __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float AlphaTest { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public FBColor AlbedoColorType { get { int o = __p.__offset(6); return o != 0 ? (FBColor)__p.bb.Get(o + __p.bb_pos) : FBColor.NONE; } }
  public TTable? AlbedoColor<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public FBColor3 AlbedoColorAsFBColor3() { return AlbedoColor<FBColor3>().Value; }
  public FBColor4 AlbedoColorAsFBColor4() { return AlbedoColor<FBColor4>().Value; }
  public FBColor3? EmissiveColor { get { int o = __p.__offset(10); return o != 0 ? (FBColor3?)(new FBColor3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Metallic { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Roughness { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public FBColor3? ReflectivityColor { get { int o = __p.__offset(16); return o != 0 ? (FBColor3?)(new FBColor3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float DirectIntensity { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MicroSurface { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmissiveIntensity { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SpecularIntensity { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public FBTexture? AlbedoTexture { get { int o = __p.__offset(26); return o != 0 ? (FBTexture?)(new FBTexture()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public FBTexture? AlphaTexture { get { int o = __p.__offset(28); return o != 0 ? (FBTexture?)(new FBTexture()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public FBTexture? EmissiveTexture { get { int o = __p.__offset(30); return o != 0 ? (FBTexture?)(new FBTexture()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public FBTexture? BumpTexture { get { int o = __p.__offset(32); return o != 0 ? (FBTexture?)(new FBTexture()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool CastShadows { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public FBTransparencyMode TransparencyMode { get { int o = __p.__offset(36); return o != 0 ? (FBTransparencyMode)__p.bb.GetInt(o + __p.bb_pos) : FBTransparencyMode.OPAQUE; } }

  public static Offset<FBMaterial> CreateFBMaterial(FlatBufferBuilder builder,
      float alpha_test = 0.0f,
      FBColor albedo_color_type = FBColor.NONE,
      int albedo_colorOffset = 0,
      FBColor3T emissive_color = null,
      float metallic = 0.0f,
      float roughness = 0.0f,
      FBColor3T reflectivity_color = null,
      float direct_intensity = 0.0f,
      float micro_surface = 0.0f,
      float emissive_intensity = 0.0f,
      float specular_intensity = 0.0f,
      Offset<FBTexture> albedo_textureOffset = default(Offset<FBTexture>),
      Offset<FBTexture> alpha_textureOffset = default(Offset<FBTexture>),
      Offset<FBTexture> emissive_textureOffset = default(Offset<FBTexture>),
      Offset<FBTexture> bump_textureOffset = default(Offset<FBTexture>),
      bool cast_shadows = false,
      FBTransparencyMode transparency_mode = FBTransparencyMode.OPAQUE) {
    builder.StartTable(17);
    FBMaterial.AddTransparencyMode(builder, transparency_mode);
    FBMaterial.AddBumpTexture(builder, bump_textureOffset);
    FBMaterial.AddEmissiveTexture(builder, emissive_textureOffset);
    FBMaterial.AddAlphaTexture(builder, alpha_textureOffset);
    FBMaterial.AddAlbedoTexture(builder, albedo_textureOffset);
    FBMaterial.AddSpecularIntensity(builder, specular_intensity);
    FBMaterial.AddEmissiveIntensity(builder, emissive_intensity);
    FBMaterial.AddMicroSurface(builder, micro_surface);
    FBMaterial.AddDirectIntensity(builder, direct_intensity);
    FBMaterial.AddReflectivityColor(builder, FBColor3.Pack(builder, reflectivity_color));
    FBMaterial.AddRoughness(builder, roughness);
    FBMaterial.AddMetallic(builder, metallic);
    FBMaterial.AddEmissiveColor(builder, FBColor3.Pack(builder, emissive_color));
    FBMaterial.AddAlbedoColor(builder, albedo_colorOffset);
    FBMaterial.AddAlphaTest(builder, alpha_test);
    FBMaterial.AddCastShadows(builder, cast_shadows);
    FBMaterial.AddAlbedoColorType(builder, albedo_color_type);
    return FBMaterial.EndFBMaterial(builder);
  }

  public static void StartFBMaterial(FlatBufferBuilder builder) { builder.StartTable(17); }
  public static void AddAlphaTest(FlatBufferBuilder builder, float alphaTest) { builder.AddFloat(0, alphaTest, 0.0f); }
  public static void AddAlbedoColorType(FlatBufferBuilder builder, FBColor albedoColorType) { builder.AddByte(1, (byte)albedoColorType, 0); }
  public static void AddAlbedoColor(FlatBufferBuilder builder, int albedoColorOffset) { builder.AddOffset(2, albedoColorOffset, 0); }
  public static void AddEmissiveColor(FlatBufferBuilder builder, Offset<FBColor3> emissiveColorOffset) { builder.AddStruct(3, emissiveColorOffset.Value, 0); }
  public static void AddMetallic(FlatBufferBuilder builder, float metallic) { builder.AddFloat(4, metallic, 0.0f); }
  public static void AddRoughness(FlatBufferBuilder builder, float roughness) { builder.AddFloat(5, roughness, 0.0f); }
  public static void AddReflectivityColor(FlatBufferBuilder builder, Offset<FBColor3> reflectivityColorOffset) { builder.AddStruct(6, reflectivityColorOffset.Value, 0); }
  public static void AddDirectIntensity(FlatBufferBuilder builder, float directIntensity) { builder.AddFloat(7, directIntensity, 0.0f); }
  public static void AddMicroSurface(FlatBufferBuilder builder, float microSurface) { builder.AddFloat(8, microSurface, 0.0f); }
  public static void AddEmissiveIntensity(FlatBufferBuilder builder, float emissiveIntensity) { builder.AddFloat(9, emissiveIntensity, 0.0f); }
  public static void AddSpecularIntensity(FlatBufferBuilder builder, float specularIntensity) { builder.AddFloat(10, specularIntensity, 0.0f); }
  public static void AddAlbedoTexture(FlatBufferBuilder builder, Offset<FBTexture> albedoTextureOffset) { builder.AddOffset(11, albedoTextureOffset.Value, 0); }
  public static void AddAlphaTexture(FlatBufferBuilder builder, Offset<FBTexture> alphaTextureOffset) { builder.AddOffset(12, alphaTextureOffset.Value, 0); }
  public static void AddEmissiveTexture(FlatBufferBuilder builder, Offset<FBTexture> emissiveTextureOffset) { builder.AddOffset(13, emissiveTextureOffset.Value, 0); }
  public static void AddBumpTexture(FlatBufferBuilder builder, Offset<FBTexture> bumpTextureOffset) { builder.AddOffset(14, bumpTextureOffset.Value, 0); }
  public static void AddCastShadows(FlatBufferBuilder builder, bool castShadows) { builder.AddBool(15, castShadows, false); }
  public static void AddTransparencyMode(FlatBufferBuilder builder, FBTransparencyMode transparencyMode) { builder.AddInt(16, (int)transparencyMode, 0); }
  public static Offset<FBMaterial> EndFBMaterial(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FBMaterial>(o);
  }
  public static void FinishFBMaterialBuffer(FlatBufferBuilder builder, Offset<FBMaterial> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFBMaterialBuffer(FlatBufferBuilder builder, Offset<FBMaterial> offset) { builder.FinishSizePrefixed(offset.Value); }
  public FBMaterialT UnPack() {
    var _o = new FBMaterialT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FBMaterialT _o) {
    _o.AlphaTest = this.AlphaTest;
    _o.AlbedoColor = new FBColorUnion();
    _o.AlbedoColor.Type = this.AlbedoColorType;
    switch (this.AlbedoColorType) {
      default: break;
      case FBColor.FBColor3:
        _o.AlbedoColor.Value = this.AlbedoColor<FBColor3>().HasValue ? this.AlbedoColor<FBColor3>().Value.UnPack() : null;
        break;
      case FBColor.FBColor4:
        _o.AlbedoColor.Value = this.AlbedoColor<FBColor4>().HasValue ? this.AlbedoColor<FBColor4>().Value.UnPack() : null;
        break;
    }
    _o.EmissiveColor = this.EmissiveColor.HasValue ? this.EmissiveColor.Value.UnPack() : null;
    _o.Metallic = this.Metallic;
    _o.Roughness = this.Roughness;
    _o.ReflectivityColor = this.ReflectivityColor.HasValue ? this.ReflectivityColor.Value.UnPack() : null;
    _o.DirectIntensity = this.DirectIntensity;
    _o.MicroSurface = this.MicroSurface;
    _o.EmissiveIntensity = this.EmissiveIntensity;
    _o.SpecularIntensity = this.SpecularIntensity;
    _o.AlbedoTexture = this.AlbedoTexture.HasValue ? this.AlbedoTexture.Value.UnPack() : null;
    _o.AlphaTexture = this.AlphaTexture.HasValue ? this.AlphaTexture.Value.UnPack() : null;
    _o.EmissiveTexture = this.EmissiveTexture.HasValue ? this.EmissiveTexture.Value.UnPack() : null;
    _o.BumpTexture = this.BumpTexture.HasValue ? this.BumpTexture.Value.UnPack() : null;
    _o.CastShadows = this.CastShadows;
    _o.TransparencyMode = this.TransparencyMode;
  }
  public static Offset<FBMaterial> Pack(FlatBufferBuilder builder, FBMaterialT _o) {
    if (_o == null) return default(Offset<FBMaterial>);
    var _albedo_color_type = _o.AlbedoColor == null ? FBColor.NONE : _o.AlbedoColor.Type;
    var _albedo_color = _o.AlbedoColor == null ? 0 : FBColorUnion.Pack(builder, _o.AlbedoColor);
    var _albedo_texture = _o.AlbedoTexture == null ? default(Offset<FBTexture>) : FBTexture.Pack(builder, _o.AlbedoTexture);
    var _alpha_texture = _o.AlphaTexture == null ? default(Offset<FBTexture>) : FBTexture.Pack(builder, _o.AlphaTexture);
    var _emissive_texture = _o.EmissiveTexture == null ? default(Offset<FBTexture>) : FBTexture.Pack(builder, _o.EmissiveTexture);
    var _bump_texture = _o.BumpTexture == null ? default(Offset<FBTexture>) : FBTexture.Pack(builder, _o.BumpTexture);
    return CreateFBMaterial(
      builder,
      _o.AlphaTest,
      _albedo_color_type,
      _albedo_color,
      _o.EmissiveColor,
      _o.Metallic,
      _o.Roughness,
      _o.ReflectivityColor,
      _o.DirectIntensity,
      _o.MicroSurface,
      _o.EmissiveIntensity,
      _o.SpecularIntensity,
      _albedo_texture,
      _alpha_texture,
      _emissive_texture,
      _bump_texture,
      _o.CastShadows,
      _o.TransparencyMode);
  }
};

public class FBMaterialT
{
  public float AlphaTest { get; set; }
  public FBColorUnion AlbedoColor { get; set; }
  public FBColor3T EmissiveColor { get; set; }
  public float Metallic { get; set; }
  public float Roughness { get; set; }
  public FBColor3T ReflectivityColor { get; set; }
  public float DirectIntensity { get; set; }
  public float MicroSurface { get; set; }
  public float EmissiveIntensity { get; set; }
  public float SpecularIntensity { get; set; }
  public FBTextureT AlbedoTexture { get; set; }
  public FBTextureT AlphaTexture { get; set; }
  public FBTextureT EmissiveTexture { get; set; }
  public FBTextureT BumpTexture { get; set; }
  public bool CastShadows { get; set; }
  public FBTransparencyMode TransparencyMode { get; set; }

  public FBMaterialT() {
    this.AlphaTest = 0.0f;
    this.AlbedoColor = null;
    this.EmissiveColor = new FBColor3T();
    this.Metallic = 0.0f;
    this.Roughness = 0.0f;
    this.ReflectivityColor = new FBColor3T();
    this.DirectIntensity = 0.0f;
    this.MicroSurface = 0.0f;
    this.EmissiveIntensity = 0.0f;
    this.SpecularIntensity = 0.0f;
    this.AlbedoTexture = null;
    this.AlphaTexture = null;
    this.EmissiveTexture = null;
    this.BumpTexture = null;
    this.CastShadows = false;
    this.TransparencyMode = FBTransparencyMode.OPAQUE;
  }
  public static FBMaterialT DeserializeFromBinary(byte[] fbBuffer) {
    return FBMaterial.GetRootAsFBMaterial(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    FBMaterial.FinishFBMaterialBuffer(fbb, FBMaterial.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

